// Code generated by mockery v2.23.1. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/andre-ols/chatservice/internal/domain/entity"

	mock "github.com/stretchr/testify/mock"
)

// ChatGateway is an autogenerated mock type for the ChatGateway type
type ChatGateway struct {
	mock.Mock
}

// CreateChat provides a mock function with given fields: ctx, chat
func (_m *ChatGateway) CreateChat(ctx context.Context, chat *entity.Chat) error {
	ret := _m.Called(ctx, chat)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Chat) error); ok {
		r0 = rf(ctx, chat)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindChatByID provides a mock function with given fields: ctx, id
func (_m *ChatGateway) FindChatByID(ctx context.Context, id string) (*entity.Chat, error) {
	ret := _m.Called(ctx, id)

	var r0 *entity.Chat
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*entity.Chat, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *entity.Chat); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Chat)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveChat provides a mock function with given fields: ctx, chat
func (_m *ChatGateway) SaveChat(ctx context.Context, chat *entity.Chat) error {
	ret := _m.Called(ctx, chat)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Chat) error); ok {
		r0 = rf(ctx, chat)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewChatGateway interface {
	mock.TestingT
	Cleanup(func())
}

// NewChatGateway creates a new instance of ChatGateway. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewChatGateway(t mockConstructorTestingTNewChatGateway) *ChatGateway {
	mock := &ChatGateway{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
