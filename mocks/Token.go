// Code generated by mockery v2.23.1. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// Token is an autogenerated mock type for the Token type
type Token struct {
	mock.Mock
}

// Decode provides a mock function with given fields: tokens
func (_m *Token) Decode(tokens []int) string {
	ret := _m.Called(tokens)

	var r0 string
	if rf, ok := ret.Get(0).(func([]int) string); ok {
		r0 = rf(tokens)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Encode provides a mock function with given fields: text, allowedSpecial, disallowedSpecial
func (_m *Token) Encode(text string, allowedSpecial []string, disallowedSpecial []string) []int {
	ret := _m.Called(text, allowedSpecial, disallowedSpecial)

	var r0 []int
	if rf, ok := ret.Get(0).(func(string, []string, []string) []int); ok {
		r0 = rf(text, allowedSpecial, disallowedSpecial)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]int)
		}
	}

	return r0
}

type mockConstructorTestingTNewToken interface {
	mock.TestingT
	Cleanup(func())
}

// NewToken creates a new instance of Token. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewToken(t mockConstructorTestingTNewToken) *Token {
	mock := &Token{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
